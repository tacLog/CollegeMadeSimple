#!/usr/bin/env node
var GenerateSchema = require('../src/index')
var pkg = require('../package.json')
var fs = require('fs')

var args = process.argv.slice(2)
var content = ''
var mode = 'json'

// Support various schema generation modes
if (args[0] === '--generic' || args[0] === '-g') {
  mode = 'generic'
  args.shift()
} else if (args[0] === '--mongoose' || args[0] === '-m') {
  mode = 'mongoose'
  args.shift()
} else if (args[0] === '--big-query' || args[0] === '-b') {
  mode = 'bigquery'
  args.shift()
}

function evaluate (data) {
  var obj

  try {
    obj = JSON.parse(data)
  } catch (e) {
    try {
      obj = eval('(' + data + ')')
    } catch (e) {
      console.log('Invalid Object or JSON')
    }
  }

  return obj
}

function prompt (motd) {
  if (motd) {
    console.log('Welcome to Generate Schema', pkg.version)
    console.log(' ')
    console.log('*', 'Mode:')
    console.log(' ', mode)
    console.log(' ')
    console.log('*', 'Example:')
    console.log(' ', '> {a:"b"}')
    console.log(' ', JSON.stringify(GenerateSchema[mode]({a: 'b'})))
    console.log(' ')
    console.log('To quit type: exit')
    console.log(' ')
  }

  process.stdout.write('> ')
}

function callback (data) {
  if (data.indexOf('exit') === 0) {
    return process.exit()
  }

  var obj = evaluate(data)

  if (obj) {
    console.log(JSON.stringify(GenerateSchema[mode](obj), null, 2))
  }

  prompt()
}

var stream = process.stdin

if (args[0]) {
  stream = fs.createReadStream(args[0])
  stream.on('close', function () {
    process.exit(1)
  })
}

stream.setEncoding('utf8')

if (!args.length) {
  prompt(true)

  stream.on('data', function (buf) {
    callback(buf.toString().trim())
  })
} else {
  stream.on('data', function (buf) {
    content += buf.toString()
  })

  stream.on('end', function () {
    console.log(JSON.stringify(GenerateSchema[mode](evaluate(content)), null, 2))
  })
}
